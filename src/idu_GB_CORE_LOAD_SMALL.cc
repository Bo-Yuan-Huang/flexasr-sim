#include <flex.h>
bool flex::decode_flex_GB_CORE_LOAD_SMALL() {
sc_biguint<1> local_var_1 = ~flex_if_axi_wr;
sc_biguint<1> local_var_3 = (local_var_1 & flex_if_axi_rd);
sc_biguint<1> local_var_4 = 1;
bool local_var_5 = (local_var_3 == local_var_4);
sc_biguint<32> local_var_7 = 861929472;
bool local_var_8 = (flex_addr_in == local_var_7);
bool local_var_9 = (flex_addr_in > local_var_7);
bool local_var_10 = (local_var_8 | local_var_9);
sc_biguint<32> local_var_11 = 861945840;
bool local_var_12 = (flex_addr_in == local_var_11);
bool local_var_13 = (flex_addr_in < local_var_11);
bool local_var_14 = (local_var_12 | local_var_13);
bool local_var_15 = (local_var_10 & local_var_14);
bool local_var_16 = (local_var_5 & local_var_15);
auto& univ_var_892 = local_var_16;
return univ_var_892;
}
void flex::update_flex_GB_CORE_LOAD_SMALL() {
std::map<sc_biguint<32>, sc_biguint<8>> local_var_0;
store_893(local_var_0);
sc_biguint<32> local_var_3 = 855638016;
sc_biguint<32> local_var_4 = (flex_addr_in - local_var_3);
sc_biguint<32> local_var_5 = 6291456;
sc_biguint<32> local_var_6 = (local_var_4 - local_var_5);
sc_biguint<32> local_var_7 = 0;
sc_biguint<32> local_var_8 = (local_var_6 + local_var_7);
auto local_var_9 = flex_gb_core_small_buffer[local_var_8];
auto local_var_9_nxt_holder = local_var_9;
sc_biguint<32> local_var_10 = 1;
sc_biguint<32> local_var_11 = (local_var_6 + local_var_10);
auto local_var_12 = flex_gb_core_small_buffer[local_var_11];
auto local_var_12_nxt_holder = local_var_12;
sc_biguint<32> local_var_13 = 10;
sc_biguint<32> local_var_14 = (local_var_6 + local_var_13);
auto local_var_15 = flex_gb_core_small_buffer[local_var_14];
auto local_var_15_nxt_holder = local_var_15;
sc_biguint<32> local_var_16 = 11;
sc_biguint<32> local_var_17 = (local_var_6 + local_var_16);
auto local_var_18 = flex_gb_core_small_buffer[local_var_17];
auto local_var_18_nxt_holder = local_var_18;
sc_biguint<32> local_var_19 = 12;
sc_biguint<32> local_var_20 = (local_var_6 + local_var_19);
auto local_var_21 = flex_gb_core_small_buffer[local_var_20];
auto local_var_21_nxt_holder = local_var_21;
sc_biguint<32> local_var_22 = 13;
sc_biguint<32> local_var_23 = (local_var_6 + local_var_22);
auto local_var_24 = flex_gb_core_small_buffer[local_var_23];
auto local_var_24_nxt_holder = local_var_24;
sc_biguint<32> local_var_25 = 14;
sc_biguint<32> local_var_26 = (local_var_6 + local_var_25);
auto local_var_27 = flex_gb_core_small_buffer[local_var_26];
auto local_var_27_nxt_holder = local_var_27;
sc_biguint<32> local_var_28 = 15;
sc_biguint<32> local_var_29 = (local_var_6 + local_var_28);
auto local_var_30 = flex_gb_core_small_buffer[local_var_29];
auto local_var_30_nxt_holder = local_var_30;
sc_biguint<32> local_var_31 = 2;
sc_biguint<32> local_var_32 = (local_var_6 + local_var_31);
auto local_var_33 = flex_gb_core_small_buffer[local_var_32];
auto local_var_33_nxt_holder = local_var_33;
sc_biguint<32> local_var_34 = 3;
sc_biguint<32> local_var_35 = (local_var_6 + local_var_34);
auto local_var_36 = flex_gb_core_small_buffer[local_var_35];
auto local_var_36_nxt_holder = local_var_36;
sc_biguint<32> local_var_37 = 4;
sc_biguint<32> local_var_38 = (local_var_6 + local_var_37);
auto local_var_39 = flex_gb_core_small_buffer[local_var_38];
auto local_var_39_nxt_holder = local_var_39;
sc_biguint<32> local_var_40 = 5;
sc_biguint<32> local_var_41 = (local_var_6 + local_var_40);
auto local_var_42 = flex_gb_core_small_buffer[local_var_41];
auto local_var_42_nxt_holder = local_var_42;
sc_biguint<32> local_var_43 = 6;
sc_biguint<32> local_var_44 = (local_var_6 + local_var_43);
auto local_var_45 = flex_gb_core_small_buffer[local_var_44];
auto local_var_45_nxt_holder = local_var_45;
sc_biguint<32> local_var_46 = 7;
sc_biguint<32> local_var_47 = (local_var_6 + local_var_46);
auto local_var_48 = flex_gb_core_small_buffer[local_var_47];
auto local_var_48_nxt_holder = local_var_48;
sc_biguint<32> local_var_49 = 8;
sc_biguint<32> local_var_50 = (local_var_6 + local_var_49);
auto local_var_51 = flex_gb_core_small_buffer[local_var_50];
auto local_var_51_nxt_holder = local_var_51;
sc_biguint<32> local_var_52 = 9;
sc_biguint<32> local_var_53 = (local_var_6 + local_var_52);
auto local_var_54 = flex_gb_core_small_buffer[local_var_53];
auto local_var_54_nxt_holder = local_var_54;
for (auto& it : local_var_0) {
  flex_VIR_OUTPUT_MEM[it.first] = it.second;
}
flex_data_out_0 = local_var_9_nxt_holder;
flex_data_out_1 = local_var_12_nxt_holder;
flex_data_out_10 = local_var_15_nxt_holder;
flex_data_out_11 = local_var_18_nxt_holder;
flex_data_out_12 = local_var_21_nxt_holder;
flex_data_out_13 = local_var_24_nxt_holder;
flex_data_out_14 = local_var_27_nxt_holder;
flex_data_out_15 = local_var_30_nxt_holder;
flex_data_out_2 = local_var_33_nxt_holder;
flex_data_out_3 = local_var_36_nxt_holder;
flex_data_out_4 = local_var_39_nxt_holder;
flex_data_out_5 = local_var_42_nxt_holder;
flex_data_out_6 = local_var_45_nxt_holder;
flex_data_out_7 = local_var_48_nxt_holder;
flex_data_out_8 = local_var_51_nxt_holder;
flex_data_out_9 = local_var_54_nxt_holder;
#ifdef ILATOR_VERBOSE
instr_update_log << "No." << std::dec << GetInstrCntr() << '\t' << "GB_CORE_LOAD_SMALL state updates:" << std::endl;
instr_update_log << "    flex_VIR_OUTPUT_MEM get updated" << std::endl;
instr_update_log << "    flex_data_out_0 => " << std::hex << "0x" << flex_data_out_0 << std::endl; 
instr_update_log << "    flex_data_out_1 => " << std::hex << "0x" << flex_data_out_1 << std::endl; 
instr_update_log << "    flex_data_out_10 => " << std::hex << "0x" << flex_data_out_10 << std::endl; 
instr_update_log << "    flex_data_out_11 => " << std::hex << "0x" << flex_data_out_11 << std::endl; 
instr_update_log << "    flex_data_out_12 => " << std::hex << "0x" << flex_data_out_12 << std::endl; 
instr_update_log << "    flex_data_out_13 => " << std::hex << "0x" << flex_data_out_13 << std::endl; 
instr_update_log << "    flex_data_out_14 => " << std::hex << "0x" << flex_data_out_14 << std::endl; 
instr_update_log << "    flex_data_out_15 => " << std::hex << "0x" << flex_data_out_15 << std::endl; 
instr_update_log << "    flex_data_out_2 => " << std::hex << "0x" << flex_data_out_2 << std::endl; 
instr_update_log << "    flex_data_out_3 => " << std::hex << "0x" << flex_data_out_3 << std::endl; 
instr_update_log << "    flex_data_out_4 => " << std::hex << "0x" << flex_data_out_4 << std::endl; 
instr_update_log << "    flex_data_out_5 => " << std::hex << "0x" << flex_data_out_5 << std::endl; 
instr_update_log << "    flex_data_out_6 => " << std::hex << "0x" << flex_data_out_6 << std::endl; 
instr_update_log << "    flex_data_out_7 => " << std::hex << "0x" << flex_data_out_7 << std::endl; 
instr_update_log << "    flex_data_out_8 => " << std::hex << "0x" << flex_data_out_8 << std::endl; 
instr_update_log << "    flex_data_out_9 => " << std::hex << "0x" << flex_data_out_9 << std::endl; 
instr_update_log << std::endl;
#endif
}
